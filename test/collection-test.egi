(test (assert "list's value pattern"
        (match {1 2 3} (list integer)
          {[,{@{@{1}} @{2 @{3}}} #t]
           [_ #f]})))

(test (assert-equal "list's cons"
        (match {1 2 3} (list integer)
          {[<cons $n $ns> [n ns]]})
        [1 {2 3}]))

(test (assert-equal "list's cons with value pattern"
        (match {1 2 3} (list integer)
          {[<cons ,1 $ns> ns]})
        {2 3}))

(test (assert-equal "list's snoc"
        (match {1 2 3} (list integer)
          {[<snoc $n $ns> [n ns]]})
        [3 {1 2}]))

(test (assert-equal "list's snoc with value pattern"
        (match {1 2 3} (list integer)
          {[<snoc ,3 $ns> ns]})
        {1 2}))

(test (assert-equal "list's join"
        (match-all {1 2 3} (list integer)
          [<join $xs $ys> [xs ys]])
        {[{} {1 2 3}]
         [{1} {2 3}]
         [{1 2} {3}]
         [{1 2 3} {}]}))

(test (assert-equal "list's join with value pattern"
        (match {1 2 3} (list integer)
          {[<join ,{1} $ns> ns]})
        {2 3}))

(test (assert-equal "list's nioj"
        (match-all {1 2 3} (list integer)
          [<nioj $xs $ys> [xs ys]])
        {[{1 2 3} {}]
         [{2 3} {1}]
         [{3} {1 2}]
         [{} {1 2 3}]}))

(test (assert-equal "list's nioj with value pattern"
        (match {1 2 3} (list integer)
          {[<nioj ,{3} $ns> ns]})
        {1 2}))

(test (assert-equal "map"
        (map (* $ 2) {1 2 3})
        {2 4 6}))

(test (assert-equal "map-and-concat"
        (map-and-concat (between 1 $) {1 2 3})
        {1 1 2 1 2 3}))

(test (assert-equal "foldr"
        (foldr (lambda [$n $ns] {n @ns}) {} {1 2 3})
        {1 2 3}))

(test (assert-equal "foldl"
        (foldl (lambda [$ns $n] {n @ns}) {} {1 2 3})
        {3 2 1}))

(test (assert-equal "filter"
        (let {[$odd? (lambda [$n] (eq? (modulo n 2) 1))]}
          (filter odd? {1 2 3}))
        {1 3}))

(test (assert-equal "remove"
        ((remove integer) {1 2 3} 2)
        {1 3}))

(test (assert-equal "remove-all"
        ((remove-all integer) {1 2 3 1 2 3} 2)
        {1 3 1 3}))

(test (assert-equal "remove-collection"
        ((remove-collection integer) {1 2 3} {1 3})
        {2}))

#|
(test (assert-equal "add" ; use of member?
        ...))

(test (assert-equal "union" ; use of member?
        ...))

(test (assert-equal "occurrence" ; use of value pattern for something
        ...))

(test (assert-equal "subcollections" ; use of loop expression
        ...))
|#

(test (assert-equal "length"
        (length {1 2 3})
        3))

(test (assert-equal "car"
        (car {1 2 3})
        1))

(test (assert-equal "cdr"
        (cdr {1 2 3})
        {2 3}))

(test (assert-equal "rac"
        (rac {1 2 3})
        3))

(test (assert-equal "rdc"
        (rdc {1 2 3})
        {1 2}))

(test (assert-equal "nth"
        (nth 1 {1 2 3})
        2))

(test (assert-equal "take"
        (take 2 {1 2 3})
        {1 2}))

(test (assert-equal "drop"
        (drop 2 {1 2 3})
        {3}))

(test (assert-equal "reverse"
        (reverse {1 2 3})
        {3 2 1}))

#|
(test (assert-equal "member?" ; use of value pattern for something
        (member? 2 {1 2 3})
        #t))

(test (assert-equal "unique" ; use of member?
        ...))

(test (assert-equal "subcollection?" ; use of member?
        ...))
|#

(test (assert-equal "concat"
        (concat {{1 2} {3 4 5}})
        {1 2 3 4 5}))

(test (assert "multiset's value pattern"
        (match {1 1 1 2 3} (multiset integer)
          {[,{@{@{1}} @{2 @{1 3}} 1} #t]
           [_ #f]})))

(test (assert-equal "multiset's cons"
        (match-all {1 2 3} (multiset integer)
          [<cons $n $ns> [n ns]])
        {[1 {2 3}] [2 {1 3}] [3 {1 2}]}))

(test (assert-equal "multiset's cons with value pattern"
        (match {1 2 3} (multiset integer)
          {[<cons ,2 $ns> ns]})
        {1 3}))

(test (assert-equal "multiset's join with value pattern"
        (match {1 2 3} (multiset integer)
          {[<join ,{1} $ns> ns]})
        {2 3}))

#|
(test (assert "set's value pattern"
        (match {1 2 3} (set integer)
          {[,{@{@{1}} @{2 @{3}}} #t]
           [_ #f]})))
|#

(test (assert-equal "set's cons"
        (match-all {1 2 3} (set integer)
          [<cons $n $ns> [n ns]])
        {[1 {1 2 3}] [2 {1 2 3}] [3 {1 2 3}]}))

(test (assert-equal "set's cons with value pattern"
        (match {1 2 3} (set integer)
          {[<cons ,2 $ns> ns]})
        {1 2 3}))
